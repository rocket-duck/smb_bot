import asyncio
import logging
from datetime import datetime, timedelta
import random

from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from bot.messages.message_parse import find_links_by_keyword
from bot.messages.who_request import handle_who_request
from bot.messages.bot_tag import handle_bot_tag
from bot.utils.participants import update_participant
from bot.messages.maslina import handle_maslina   # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
from bot.config.tokens import BOT_USERNAME
from bot.config.flags import (
    KEYWORD_RESPONSES_ENABLE,
    TIMEOUT_RESPONSES_ENABLE,
    WHO_REQUEST_ENABLE,
    BOT_TAG_ENABLE,
    MASLINA_ENABLE
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∞–π–º–∞—É—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
TIMEOUT_MINUTES: int = 60

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–ø–æ —á–∞—Ç–∞–º)
recent_links: dict = {}  # –§–æ—Ä–º–∞—Ç: {chat_id: {"url": –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞}}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤: {(chat_id, message_id): {"likes": int, "dislikes": int}}
reaction_counts: dict = {}


def should_process_text(text: str) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
    –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è:
      - –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ä–æ–≤–Ω–æ —Ä–∞–≤–µ–Ω —É–ø–æ–º–∏–Ω–∞–Ω–∏—é –±–æ—Ç–∞
      - –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–µ—à–∞ (–∫–æ–º–∞–Ω–¥–∞)
      - –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞
    """
    if should_ignore_bot_mention(text, BOT_USERNAME):
        logging.debug("–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é –±–æ—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞.")
        return False
    if text.startswith("/"):
        logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {text} –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞.")
        return False
    if not KEYWORD_RESPONSES_ENABLE:
        logging.debug("–§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return False
    return True


def should_ignore_bot_mention(text: str, bot_username) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ–≤–Ω–æ —Ä–∞–≤–µ–Ω —É–ø–æ–º–∏–Ω–∞–Ω–∏—é –±–æ—Ç–∞.
    """
    normalized_username = bot_username[0] \
        if isinstance(bot_username, tuple) \
        else bot_username
    return text.lower() == f"@{normalized_username.lower()}"


async def handle_message(message: Message, state: FSMContext) -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not message.text:
        logging.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    text: str = message.text.strip()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    update_participant(message)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–Ω–æ–≤—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    await handle_bot_tag(message, BOT_USERNAME, BOT_TAG_ENABLE)

    if random.random() < 0.3:
        await handle_who_request(message, WHO_REQUEST_ENABLE)
    else:
        logging.debug("–°–ª—É—á–∞–π–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

    await handle_maslina(message, MASLINA_ENABLE)

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if not should_process_text(text):
        return

    keyword: str = extract_keyword(message)
    if not keyword:
        return

    results: list = find_links_by_keyword(keyword)
    if results:
        await process_results(message, results)
    else:
        logging.debug("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def extract_keyword(message: Message) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if not message.text:
        logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞: {message}")
        return ""
    keyword: str = message.text.strip().lower()
    logging.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
    return keyword


async def process_results(message: Message, results: list) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫.
    """
    filtered_results = (
        filter_recent_links(message.chat.id, results)
        if TIMEOUT_RESPONSES_ENABLE
        else results
    )

    if filtered_results:
        response: str = format_response(filtered_results)
        logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏: {response}")
        # –ö–Ω–æ–ø–∫–∞ –ª–∞–π–∫ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 0
        like_button = InlineKeyboardButton(text="üëç 0", callback_data="like_init")
        # –ö–Ω–æ–ø–∫–∞ –¥–∏–∑–ª–∞–π–∫
        dislike_button = InlineKeyboardButton(text="üëé 0", callback_data="dislike_init")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[like_button, dislike_button]], row_width=2)
        sent = await message.answer(response, reply_to_message_id=message.message_id, reply_markup=keyboard)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        reaction_counts[(sent.chat.id, sent.message_id)] = {"likes": 0, "dislikes": 0}
        # –û–±–Ω–æ–≤–ª—è–µ–º callback_data, —á—Ç–æ–±—ã —Å–æ–¥–µ—Ä–∂–∞–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ chat_id –∏ message_id
        new_like_data = f"like:{sent.chat.id}:{sent.message_id}"
        new_dislike_data = f"dislike:{sent.chat.id}:{sent.message_id}"
        like_button = InlineKeyboardButton(text="üëç 0", callback_data=new_like_data)
        dislike_button = InlineKeyboardButton(text="üëé 0", callback_data=new_dislike_data)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[like_button, dislike_button]], row_width=2)
        await sent.edit_reply_markup(reply_markup=keyboard)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ recent_links —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
        if TIMEOUT_RESPONSES_ENABLE:
            for _, url in filtered_results:
                asyncio.create_task(remove_link_after_timeout(message.chat.id, url))
    else:
        logging.debug("–í—Å–µ —Å—Å—ã–ª–∫–∏ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–∞–≤–Ω–æ.")


def filter_recent_links(chat_id: int, results: list) -> list:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–¥–∞–≤–Ω–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.
    """
    filtered_results = []
    chat_recent_links = recent_links.setdefault(chat_id, {})
    for name, url in results:
        if (url in chat_recent_links
                and datetime.now() - chat_recent_links[url]
                < timedelta(minutes=TIMEOUT_MINUTES)):
            logging.debug(f"–ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ '{url}' "
                          f"–¥–ª—è —á–∞—Ç–∞ {chat_id} (–æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –Ω–µ–¥–∞–≤–Ω–æ).")
        else:
            filtered_results.append((name, url))
            chat_recent_links[url] = datetime.now()
    return filtered_results


def format_response(results: list) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return ("–í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è:\n"
            + "\n".join([f"{name}: {url}" for name, url in results]))


async def remove_link_after_timeout(chat_id: int, url: str) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –∏–∑ recent_links –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç.
    """
    await asyncio.sleep(TIMEOUT_MINUTES * 60)
    chat_recent_links = recent_links.get(chat_id, {})
    if url in chat_recent_links:
        del chat_recent_links[url]
        logging.debug(f"–°—Å—ã–ª–∫–∞ '{url}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")


async def handle_like_callback(callback_query: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫.
    """
    data = callback_query.data  # —Ñ–æ—Ä–º–∞—Ç–∞ "like:chat_id:message_id"
    _, chat_id_str, message_id_str = data.split(":")
    chat_id = int(chat_id_str)
    message_id = int(message_id_str)
    key = (chat_id, message_id)
    if key not in reaction_counts:
        await callback_query.answer()
        return
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
    reaction_counts[key]["likes"] += 1
    likes = reaction_counts[key]["likes"]
    dislikes = reaction_counts[key]["dislikes"]
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = callback_query.message
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
    like_button = InlineKeyboardButton(text=f"üëç {likes}", callback_data=f"like:{chat_id}:{message_id}")
    dislike_button = InlineKeyboardButton(text=f"üëé {dislikes}", callback_data=f"dislike:{chat_id}:{message_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[like_button, dislike_button]], row_width=2)
    await msg.edit_reply_markup(reply_markup=keyboard)
    await callback_query.answer("üëç")


async def handle_dislike_callback(callback_query: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–∏–∑–ª–∞–π–∫.
    """
    data = callback_query.data  # —Ñ–æ—Ä–º–∞—Ç–∞ "dislike:chat_id:message_id"
    _, chat_id_str, message_id_str = data.split(":")
    chat_id = int(chat_id_str)
    message_id = int(message_id_str)
    key = (chat_id, message_id)
    if key not in reaction_counts:
        await callback_query.answer()
        return
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–∏–∑–ª–∞–π–∫–æ–≤
    reaction_counts[key]["dislikes"] += 1
    dislikes = reaction_counts[key]["dislikes"]
    likes = reaction_counts[key]["likes"]
    msg = callback_query.message
    # –ï—Å–ª–∏ –¥–∏–∑–ª–∞–π–∫–æ–≤ —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ, —á–µ–º –ª–∞–π–∫–æ–≤ ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if dislikes > likes:
        await msg.delete()
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â
        reaction_counts.pop(key, None)
        recent_links.get(chat_id, {}).pop(msg.text, None)
        await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
        like_button = InlineKeyboardButton(text=f"üëç {likes}", callback_data=f"like:{chat_id}:{message_id}")
        dislike_button = InlineKeyboardButton(text=f"üëé {dislikes}", callback_data=f"dislike:{chat_id}:{message_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[like_button, dislike_button]], row_width=2)
        await msg.edit_reply_markup(reply_markup=keyboard)
        await callback_query.answer("üëé")


async def no_fsm_filter(message: Message, state: FSMContext) -> bool:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏
    —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    current_state = await state.get_state()
    return ((current_state is None)
            and bool(message.text)
            and (not message.text.startswith("/")))


def register_message_handlers(dp) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    dp.message.register(handle_message, no_fsm_filter)
    dp.callback_query.register(handle_like_callback, lambda c: c.data and c.data.startswith("like:"))
    dp.callback_query.register(handle_dislike_callback, lambda c: c.data and c.data.startswith("dislike:"))
